name: Build iOS App

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    permissions:
      contents: write
    
    env:
      ARCHIVE_PATH: /Users/runner/work/VideoWaniOS/VideoWaniOS/build/VideoWaniOS.xcarchive
      EXPORT_PATH: /Users/runner/work/VideoWaniOS/VideoWaniOS/build/export
      
    steps:
    - uses: actions/checkout@v3

    - name: Setup Xcode version
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0'
    - name: Install dependencies
      run: |
        gem install cocoapods
        # Remove duplicated gem install and fix pod installation
        if [ -f "Podfile" ]; then
          pod install || pod install --repo-update || echo "Pod install failed, continuing with empty Pods"
        fi

    - name: List files in directory
      run: ls -la

    - name: Create exportOptions.plist
      run: |
        cat > exportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>development</string>
            <key>compileBitcode</key>
            <false/>
            <key>signingStyle</key>
            <string>manual</string>
        </dict>
        </plist>
        EOF

    - name: Build iOS App for Distribution
      run: |
        mkdir -p build/logs
        echo "Building archive at path: $ARCHIVE_PATH"
        # Use explicit path to the project and set specific build settings
        xcodebuild clean archive \
          -project ${GITHUB_WORKSPACE}/VideoWaniOS.xcodeproj \
          -scheme VideoWaniOS \
          -sdk iphoneos \
          -configuration Release \
          -archivePath ${ARCHIVE_PATH} \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGN_ENTITLEMENTS="" \
          CODE_SIGNING_ALLOWED=NO \
          | tee build/logs/build.log || exit 1
        
        # Verify archive was created
        if [ -d "$ARCHIVE_PATH" ]; then
          echo "✅ Archive created successfully at: $ARCHIVE_PATH"
          ls -la "$ARCHIVE_PATH"
        else
          echo "❌ Archive was not created at: $ARCHIVE_PATH"
          echo "Contents of build directory:"
          ls -la build/
          exit 1
        fi

    - name: Export IPA
      run: |
        echo "Exporting IPA from archive: $ARCHIVE_PATH"
        
        # Check if archive exists before attempting to export
        if [ ! -d "$ARCHIVE_PATH" ]; then
          echo "Error: Archive not found at path $ARCHIVE_PATH"
          echo "Contents of build directory:"
          ls -la build/
          exit 1
        fi
        
        # Try standard export first
        xcodebuild -exportArchive -archivePath "$ARCHIVE_PATH" -exportPath "$EXPORT_PATH" -exportOptionsPlist exportOptions.plist
        export_status=$?
        
        if [ $export_status -eq 0 ] && [ -f "$EXPORT_PATH/VideoWaniOS.ipa" ]; then
          echo "✅ Standard export successful"
          cp "$EXPORT_PATH/VideoWaniOS.ipa" build/VideoWaniOS.ipa
        else
          echo "⚠️ Standard export failed, using manual method..."
          
          # Verify the .app exists inside the archive
          if [ -d "$ARCHIVE_PATH/Products/Applications/VideoWaniOS.app" ]; then
            echo "Found app inside archive, proceeding with manual export"
            mkdir -p build/Payload
            cp -r "$ARCHIVE_PATH/Products/Applications/VideoWaniOS.app" build/Payload/
            cd build && zip -r VideoWaniOS.ipa Payload
            cd ..
            echo "✅ Manual export completed"
          else
            echo "❌ Error: App not found in archive at $ARCHIVE_PATH/Products/Applications/"
            echo "Contents of Products directory:"
            ls -la "$ARCHIVE_PATH/Products/" || echo "Products directory not found"
            exit 1
          fi
        fi

    - name: Upload IPA
      uses: actions/upload-artifact@v4
      with:
        name: VideoWaniOS
        path: build/VideoWaniOS.ipa

    - name: Archive Build
      uses: actions/upload-artifact@v4
      with:
        name: build
        path: build/

    - name: Upload Build Logs
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: build/logs/

    - name: Prepare Web Version for Deployment
      run: |
        mkdir -p build/web_version
        if [ -d "web_version" ]; then
          cp -r web_version/* build/web_version/ || true
        fi

    - name: Update manifest.plist with correct URL
      run: |
        sed -i.bak "s|https://Flickinny11.github.io|https://${{ github.repository_owner }}.github.io|g" manifest.plist
        cp manifest.plist build/
        cp index.html build/

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./build
